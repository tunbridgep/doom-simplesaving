/*
//This item signifies that we have a start token, so we can verify that a player has been setup correctly etc
//This also gives us the advantage of "restarting" when on a pistol-start enforced mission, like in scythe2
class NoSaveStartup : SavingModPermanentItem
{
    bool startup;
    
    override void DoEffect()
    {
        //This needs to be delayed by a bit or it doesn't make a save
        if (gametic > 5 && !startup && owner)
        {
            //Give our starter gems rest
            if (nosave_items_starting > 0)
                owner.GiveInventory("SaveGem",nosave_items_starting);

            //Autosave at the start of the game, so we don't have pistol starts
            LevelLocals.MakeAutoSave();

            startup = true;
        }
            
        //Set INVBAR on existing savegems
        //We may need to refresh our count
        let savegem = owner.FindInventory("SaveGem");
        bool inv = SSMiscUtils.ShowInInventory();
        if (savegem && ((savegem.bINVBAR && !inv) || (!savegem.bINVBAR && inv)))
        {
            let amount = savegem.amount;
            owner.TakeInventory("SaveGem",9999);
            owner.GiveInventory("SaveGem",amount);
            SSDebug.LogVerbose("Refreshed Save Gems");
        }
            
        super.DoEffect();
    }
}
*/

//This only exists to not blow up savegames
//TODO: Remove in a future version
class NoSaveStartup : Inventory
{
}

//Handler for giving out savegems and spawning them on enemies when they die.
//Also does a few other checks, like checking for autosaving being enabled
class SaveingModItemHandler : SavingModEventHandler
{
    int has_spawned;
    int total_enemies;
    int remaining_enemies;

    bool should_autosave;

    override void UniqueWorldLoaded(WorldEvent e)
    {
        has_spawned = 0;
    }
      
    override void UniquePlayerEntered(Actor Player, bool returning)
    {
        //don't give out new items on hub maps
        if (returning)
            return;
    
        //Make sure autosaving is enabled
        if (disableautosave == 2)
        {
            String warning = Stringtable.Localize("$NOSAVE_WARNING");
            Console.MidPrint(SMALLFONT, "$NOSAVE_WARNING", true);
        }
        
        /*
        //Make sure our save button is bound
        int key = Bindings.GetKeysForCommand("nosave_quicksave");
        {
            if (key == -1)
            {
                String warning = Stringtable.Localize("$NOSAVE_NOKEY");
                Console.MidPrint(SMALLFONT, "$NOSAVE_NOKEY", true);
            }
        }
        */

        let gem = Player.FindInventory("SaveGem");
        if (!gem)
        {
            //Because of the stupid way "keep depleted" works, we need to make sure we always add one and then remove it if we start with 0
            Player.GiveInventory("SaveGem",1);
            Player.SetInventory("SaveGem",nosave_items_starting);
            
            //Autosave at the start of the game, so we don't have pistol starts
            //We need to set this to work after a few tics, otherwise it won't save
            if (disableautosave > 0)
                should_autosave = true;
        }
    }

    override void WorldTick()
    {
        if (should_autosave && gametic > 5)
        {
            SSDebug.LogVerbose("Performing start of game autosave");
            LevelLocals.MakeAutoSave();
            should_autosave = false;
        }

        //Set INVBAR on existing savegems
        let player = players[consoleplayer].mo;
        let savegem = player.FindInventory("SaveGem");
        bool inv = SSMiscUtils.ShowInInventory();
        if (savegem && ((savegem.bINVBAR && !inv) || (!savegem.bINVBAR && inv)))
        {
            let amount = savegem.amount;
            //owner.TakeInventory("SaveGem",9999);
            savegem.Destroy();
            player.GiveInventory("SaveGem",amount);
            SSDebug.LogVerbose("Refreshed Save Gems");
        }

    }
 
    bool HasMetThreshold()
    {
        return total_enemies >= nosave_enemy_threshold;
    }
    
    bool IsValidActor(Actor a)
    {
        return a && a.bISMONSTER && a.bCOUNTKILL;
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        if (IsValidActor(e.Thing))
        {
            total_enemies++;
            remaining_enemies++;
        }
    }
    
    bool IsValidMap()
    {
        return (nosave_map_skip == 0 || level.LevelNum % nosave_map_skip == 0)
			&& (level.LevelNum >= nosave_map_first);
    }
    
    int GetSpawnsRemaining()
    {
        return GetTotalSaveItems() - has_spawned;
    }
    
    int GetTotalSaveItems()
    {
        if (nosave_items_per_level_bonus > 0)
            return nosave_items_per_level + (total_enemies / nosave_items_per_level_bonus);
        return nosave_items_per_level;
    }

    override void WorldThingDied(WorldEvent e)
    {
        Actor a = e.Thing;
        
        if (IsValidActor(a))
        {
            remaining_enemies--;
            if (HasMetThreshold() && IsValidMap() && GetSpawnsRemaining() > 0 && total_enemies > 0 && GetTotalSaveItems() > 0)
            {
                int droproll;
                let segment_size = (0.0 + total_enemies) / (GetTotalSaveItems());

                if (nosave_consistent_drops)
                {
                    int noise;
                    if (has_spawned == GetTotalSaveItems() - 1)
                        noise = random(0, total_enemies / 10);
                    else
                        noise = random(-total_enemies / 10, total_enemies / 10);

                    droproll = total_enemies - remaining_enemies >= segment_size * (has_spawned + 1) - noise ? 1 : 0;
                    SSDebug.LogVerbose("enemy: "..(total_enemies - remaining_enemies)..", segment_size: "..segment_size..", has_spawned: "..has_spawned);
                }
                else
                {
                    droproll = random(1, segment_size);
                    SSDebug.LogVerbose("Rolling between 1 and "..segment_size.." - rolled "..droproll.."");
                }

                if (droproll == 1 || GetTotalSaveItems() >= remaining_enemies)
                {
                    a.A_DropItem("SaveGem");
                    has_spawned++;
                }
            }
            else
                SSDebug.LogVerbose("Not rolling for enemy "..(total_enemies - remaining_enemies).."/"..total_enemies.." - not valid map or threshold, or exceeded spawn number");
        }
    }
}

