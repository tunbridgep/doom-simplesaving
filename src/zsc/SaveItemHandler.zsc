//This item signifies that we have a start token, so we can verify that a player has been setup correctly etc
//This also gives us the advantage of "restarting" when on a pistol-start enforced mission, like in scythe2
class NoSaveStartup : SavingModPermanentItem
{
    bool startup;
    
    override void Travelled()
    {
        if (nosave_strip_between_levels)
            owner.TakeInventory("SaveGem",999);
    }
    
    void ButtonPress(bool doublePress)
    {
        SaveGem savegem = SaveGem(owner.FindInventory("SaveGem",true));
        if (savegem && doublePress)
            owner.UseInventory(savegem);
        else if (savegem)
            savegem.DisplayCornerMessage(true);
        else
            Console.Printf(Stringtable.Localize("$NOSAVE_REMAIN_NONE"));
    }

    override void DoEffect()
    {
        //This needs to be delayed by a bit or it doesn't make a save
        if (gametic > 5 && !startup)
        {
            //Give our starter gems rest
            if (nosave_items_starting > 0)
                owner.GiveInventory("SaveGem",nosave_items_starting);

            //Autosave at the start of the game, so we don't have pistol starts
            LevelLocals.MakeAutoSave();
            
            startup = true;
        }
        super.DoEffect();
    }
}

//Handler for keypresses and player joining/leaving etc.
class SaveingModItemHandler : SavingModEventHandler
{
    int has_spawned;
    int total_enemies;
    int remaining_enemies;
    
    const SAVE_BUTTON_TICS = 35;
    int lastpress[32];

    override void UniqueWorldLoaded(WorldEvent e)
    {
        has_spawned = 0;
    }
      
    override void UniquePlayerEntered(Actor Player, bool returning)
    {
        //don't give out new items on hub maps
        if (returning)
            return;
    
        //Make sure autosaving is enabled
        if (disableautosave == 2)
        {
            String warning = Stringtable.Localize("$NOSAVE_WARNING");
            Console.MidPrint(SMALLFONT, "$NOSAVE_WARNING", true);
        }
        
        /*
        //Make sure our save button is bound
        int key = Bindings.GetKeysForCommand("nosave_quicksave");
        {
            if (key == -1)
            {
                String warning = Stringtable.Localize("$NOSAVE_NOKEY");
                Console.MidPrint(SMALLFONT, "$NOSAVE_NOKEY", true);
            }
        }
        */

        if (!Player.CheckInventory("NoSaveStartup",1))
        {
            Player.GiveInventory("NoSaveStartup",1);
        }
    }
    
    bool HasMetThreshold()
    {
        return total_enemies >= nosave_enemy_threshold;
    }
    
    bool IsValidActor(Actor a)
    {
        return a && a.bISMONSTER && a.bCOUNTKILL;
    }
    
    override void NetworkProcess (ConsoleEvent e) 
    {
        if (e.Name == "SaveButton")
        {
            let player = players[e.Player].mo;
            NoSaveStartup token = NoSaveStartup(player.FindInventory("NoSaveStartup",true));

            if (!token)
                return;

            //we have double tapped (or single tapped, if not enabled)
            if (!nosave_double_tap || (lastpress[e.Player] <= gametic && gametic - lastpress[e.Player] <= SAVE_BUTTON_TICS && lastpress[e.Player] > SAVE_BUTTON_TICS))
            {
                token.ButtonPress(true);
            }
            else
            {
                token.ButtonPress(false);
            }
            
            SSDebug.LogVerbose("lastpress is "..lastpress[e.Player]..", gametic is "..gametic.."");
            lastpress[e.Player] = gametic;
        }
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        if (IsValidActor(e.Thing))
        {
            total_enemies++;
            remaining_enemies++;
        }
    }
    
    bool IsValidMap()
    {
        return (nosave_map_skip == 0 || level.LevelNum % nosave_map_skip == 0)
			&& (level.LevelNum >= nosave_map_first);
    }
    
    int GetSpawnsRemaining()
    {
        return GetTotalSaveItems() - has_spawned;
    }
    
    int GetTotalSaveItems()
    {
        if (nosave_items_per_level_bonus > 0)
            return nosave_items_per_level + (total_enemies / nosave_items_per_level_bonus);
        return nosave_items_per_level;
    }

    override void WorldThingDied(WorldEvent e)
    {
        Actor a = e.Thing;
        
        if (IsValidActor(a))
        {
            remaining_enemies--;
            if (HasMetThreshold() && IsValidMap() && GetSpawnsRemaining() > 0 && total_enemies > 0 && GetTotalSaveItems() > 0)
            {
                int droproll;
                let segment_size = (0.0 + total_enemies) / (GetTotalSaveItems());

                if (nosave_consistent_drops)
                {
                    int noise;
                    if (has_spawned == GetTotalSaveItems() - 1)
                        noise = random(0, total_enemies / 10);
                    else
                        noise = random(-total_enemies / 10, total_enemies / 10);

                    droproll = total_enemies - remaining_enemies >= segment_size * (has_spawned + 1) - noise ? 1 : 0;
                    SSDebug.LogVerbose("enemy: "..(total_enemies - remaining_enemies)..", segment_size: "..segment_size..", has_spawned: "..has_spawned);
                }
                else
                {
                    droproll = random(1, segment_size);
                    SSDebug.LogVerbose("Rolling between 1 and "..segment_size.." - rolled "..droproll.."");
                }

                if (droproll == 1 || GetTotalSaveItems() >= remaining_enemies)
                {
                    a.A_DropItem("SaveGem");
                    has_spawned++;
                }
            }
            else
                SSDebug.LogVerbose("Not rolling for enemy #"..remaining_enemies.." - not valid map or threshold, or exceeded spawn number");
        }
    }
}

