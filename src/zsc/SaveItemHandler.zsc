class SaveingModItemHandler : SavingModEventHandler
{
    int has_spawned;
    int total_enemies;
    int unrolled_enemies;
    
    const SAVE_BUTTON_TICS = 35;
    int lastpress[32];

    override void UniqueWorldLoaded(WorldEvent e)
    {
        has_spawned = 0;
    }
      
    override void UniquePlayerEntered(Actor Player, bool returning)
    {
        //don't give out new items on hub maps
        if (returning)
            return;
    
        //Make sure autosaving is enabled
        if (disableautosave == 2)
        {
            String warning = Stringtable.Localize("$NOSAVE_WARNING");
            Console.MidPrint(SMALLFONT, "$NOSAVE_WARNING", true);
        }
        
        /*
        //Make sure our save button is bound
        int key = KeyBindings.GetKeysForCommand("nosave_quicksave");
        {
            if (key == -1)
            {
                String warning = Stringtable.Localize("$NOSAVE_NOKEY");
                Console.MidPrint(SMALLFONT, "$NOSAVE_NOKEY", true);
            }
        }
        */
    
        if (nosave_strip_between_levels)
            Player.TakeInventory("SaveGem",99999999);
        if (!Player.CheckInventory("NoSaveStartup",1))
        {
            Player.GiveInventory("NoSaveStartup",1);
            
            Player.ACS_ScriptCall("LoadAutosave");
        
            if (nosave_items_starting > 0)
                Player.GiveInventory("SaveGem",nosave_items_starting);
        }
    }
    
    bool HasMetThreshold()
    {
        return total_enemies >= nosave_enemy_threshold - 1;
    }
    
    bool IsValidActor(Actor a)
    {
        return a && a.bISMONSTER && a.bCOUNTKILL;
    }
    
    void DisplaySaveGemsMessage(Actor player)
    {
        int SaveGems = player.CountInv("SaveGem");
    
        String prefix = Stringtable.Localize("$NOSAVE_REMAIN_1");
        String postfix = Stringtable.Localize("$NOSAVE_REMAIN_2");
        String postfix2 = Stringtable.Localize("$NOSAVE_REMAIN_3");
        
        if (SaveGems > 0)
            Console.Printf(prefix.." "..SaveGems.." "..postfix.." "..postfix2);
        else
            Console.Printf(prefix.." "..SaveGems.." "..postfix);
    }
    
    void Save(Actor player)
    {   
        if (player.CountInv("SaveGem") > 0)
        {
            LevelLocals.MakeAutoSave();
            Console.Printf(Stringtable.Localize("$NOSAVE_SAVED"));
            player.TakeInventory("SaveGem",1);
        }
        else
            //Console.Printf(Stringtable.Localize("$NOSAVE_PREVENTION"));
            DisplaySaveGemsMessage(player);
    }
    
    
    override void NetworkProcess (ConsoleEvent e) 
    {
        if (e.Name == "SaveButton")
        {
            if (gametic - lastpress[e.Player] <= SAVE_BUTTON_TICS && lastpress[e.Player] > SAVE_BUTTON_TICS)
                Save(players[e.Player].mo);
            else
                DisplaySaveGemsMessage(players[e.Player].mo);
                
            lastpress[e.Player] = gametic;
        }
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        if (IsValidActor(e.Thing))
        {
            total_enemies++;
            unrolled_enemies++;
        }
    }
    
    bool IsValidMap()
    {
        return nosave_map_skip == 0 || level.LevelNum % nosave_map_skip == 0;
    }
    
    int GetSpawnsRemaining()
    {
        return nosave_items_per_level - has_spawned;
    }
    
    override void WorldThingDied(WorldEvent e)
    {
        Actor a = e.Thing;
        
        if (IsValidActor(a))
        {
            unrolled_enemies--;
            if (HasMetThreshold() && IsValidMap() && GetSpawnsRemaining() > 0 )
            {
                int droproll = random(0, unrolled_enemies);
                
                SSDebug.LogVerbose("Rolling between 0 and "..unrolled_enemies.." - rolled a "..droproll.."");
                
                if (droproll == 1)
                {
                    a.A_DropItem("SaveGem");
                    has_spawned++;
                }
            }
            else
                SSDebug.LogVerbose("Not rolling for enemy #"..unrolled_enemies.." - not valid map or threshold, or exceeded spawn number");
        }
    }
}

//This item signifies that we have a start token, so we can verify that a player has been setup correctly etc
//This also gives us the advantage of "restarting" when on a pistol-start enforced mission, like in scythe2
class NoSaveStartup : SavingModPermanentItem {}
