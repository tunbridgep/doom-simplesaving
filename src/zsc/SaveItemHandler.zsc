class SaveingModItemHandler : SavingModEventHandler
{
    int has_spawned;
    int total_enemies;
    int unrolled_enemies;

    override void UniqueWorldLoaded(WorldEvent e)
    {
        has_spawned = 0;
        Console.printf("Unique World Loaded");
    }
      
    override void UniquePlayerEntered(Actor Player, bool returning)
    {
        //Make sure autosaving is enabled
        if (disableautosave == 2)
        {
            String warning = Stringtable.Localize("$NOSAVE_WARNING");
            Player.C_MidPrint("SMALLFONT", "$NOSAVE_WARNING", true);
        }
        
        //Make sure our save button is bound
        /*
        int key = KeyBindings.GetKeysForCommand("nosave_quicksave");
        {
            if (key == -1)
            {
                String warning = Stringtable.Localize("$NOSAVE_NOKEY");
                Player.C_MidPrint("SMALLFONT", "$NOSAVE_NOKEY", true);
            }
        }
        */
    
        if (!returning && nosave_strip_between_levels)
            Player.TakeInventory("SaveGem",99999999);
        if (!Player.CheckInventory("NoSaveStartup",1))
        {
            Player.GiveInventory("NoSaveStartup",1);
            
            Player.ACS_ScriptCall("LoadAutosave");
        
            if (nosave_items_starting > 0)
                Player.GiveInventory("SaveGem",nosave_items_starting);
        }
    }
    
    bool HasMetThreshold()
    {
        return total_enemies >= nosave_enemy_threshold - 1;
    }
    
    bool IsValidActor(Actor a)
    {
        return a && a.bISMONSTER && a.bCOUNTKILL;
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {
        if (IsValidActor(e.Thing))
        {
            total_enemies++;
            unrolled_enemies++;
        }
    }
    
    bool IsValidMap()
    {
        return nosave_map_skip == 0 || level.LevelNum % nosave_map_skip == 0;
    }
    
    int GetSpawnsRemaining()
    {
        return nosave_items_per_level - has_spawned;
    }
    
    override void WorldThingDied(WorldEvent e)
    {
        Actor a = e.Thing;
        
        if (IsValidActor(a))
        {
            unrolled_enemies--;
            if (HasMetThreshold() && IsValidMap() && GetSpawnsRemaining() > 0 )
            {
                int droproll = random(0, unrolled_enemies);
                
                SSDebug.LogVerbose("Rolling between 0 and "..unrolled_enemies.." - rolled a "..droproll.."");
                
                if (droproll == 1)
                {
                    a.A_DropItem("SaveGem");
                    has_spawned++;
                }
            }
            else
                SSDebug.LogVerbose("Not rolling for enemy #"..unrolled_enemies.." - not valid map or threshold, or exceeded spawn number");
        }
    }
}

//This item signifies that we have a start token, so we can verify that a player has been setup correctly etc
//This also gives us the advantage of "restarting" when on a pistol-start enforced mission, like in scythe2
class NoSaveStartup : SavingModPermanentItem {}
