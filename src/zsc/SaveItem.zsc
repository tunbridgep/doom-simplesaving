class SavingModPermanentItem : Inventory
{
    Default
    {
        +INVENTORY.UNDROPPABLE;
        +INVENTORY.ALWAYSPICKUP;
        +INVENTORY.UNCLEARABLE;
        +INVENTORY.HUBPOWER;
        +INVENTORY.PERSISTENTPOWER;
        +INVENTORY.UNTOSSABLE;
        +INVENTORY.IGNORESKILL;
        //+INVENTORY.INVBAR;
        Inventory.InterHubAmount 1;
        Inventory.MaxAmount 1;
    }
}

struct StyleStruct
{
    enum Name
    {
        Doom,
        DoomAlt,
        Raven,
        Strife,
        Chex,
        Floppy,
    }
}

class SaveGem : SavingModPermanentItem
{
    Default
    {
        -INVENTORY.UNDROPPABLE;;
        -INVENTORY.UNTOSSABLE;
		-INVENTORY.ALWAYSPICKUP;
        Inventory.InterHubAmount 9999;
        Inventory.MaxAmount 9999;
        Inventory.Icon "ARTIALI1";
        Tag "$NOSAVE_ITEM_NAME";
    }
    
    //This has to be done here, rather than being dynamic
    //because otherwise the inventory UI completely breaks.
    //But there's nothing stopping the player dropping the item and picking it up again
    /* override void DoEffect() */
    override void AttachToOwner(Actor other)
    {
        if (nosave_show_inventory)
            bINVBAR = true;
        else
            bINVBAR = false;
        super.AttachToOwner(other);
    }
    
	override bool CanPickup(Actor toucher)
    {
		let max = nosave_items_max;
		if (nosave_items_starting > max)
			max = nosave_items_starting;
        bool allow = toucher.CountInv("SaveGem") < max;
        return allow && super.CanPickup(toucher);
    }
	
    override bool Use(bool pickup)
    {
        SaveingModItemHandler.Save(owner);
        return super.Use(pickup);
    }
    
    int GetSkin()
    {
        return nosave_style;
    }

    override void Tick()
    {
        Super.Tick();
        SetIcon();
    }
 
    override String PickupMessage()
    {
        StyleStruct Style;
        int skin = GetSkin();
        String txt = "$NOSAVE_ITEM_PICKUP_RAVEN";

        if (skin == Style.Doom || skin == Style.DoomAlt)
            txt = "$NOSAVE_ITEM_PICKUP_DOOM";
        else if (skin == Style.Floppy)
            txt = "$NOSAVE_ITEM_PICKUP_FLOPPY";

        return StringTable.Localize(txt);
    }

    void SetIcon()
    {
        StyleStruct Style;
        int skin = GetSkin();
        string _icon;
        
        if (skin == Style.Raven)
            _icon = "ARTIALI1";
        else if (skin == Style.Doom)
            _icon = "ARTIALI2";
        else if (skin == Style.DoomAlt)
            _icon = "ARTIALI6";
        //else if (skin == Style.Strife)
        //else if (skin == Style.Chex)
        else if (skin == Style.Floppy)
            _icon = "ARTIALI5";
        
        Icon = TexMan.CheckForTexture(_icon);
    }

    void SetFrameInformation(int _frame)
    {
        SetIcon();
        StyleStruct Style;
        String _sprite;
        int _speed = 1;
        int skin = GetSkin();
        
        bFLOATBOB = false;

        if (skin == Style.Raven)
        {
            _frame = 0; //Always force to frame zero
            _sprite = "AKOL";
            bFLOATBOB = true;
        }
        else if (skin == Style.Doom)
        {
            _speed = 4;
            _sprite = "DMES";
        }
        else if (skin == Style.DoomAlt)
        {
            _speed = 4;
            _sprite = "DME2";
        }
        else if (skin == Style.Floppy)
        {
            _sprite = "FLOP";
            _frame = 0; //Always force to frame zero
        }
        
        frame = _frame;
        sprite = GetSpriteIndex(_sprite);
        A_SetTics(_speed);
    }

    States
    {
        Spawn:
            //Create temp sprites. See note here:
            //https://zdoom.org/wiki/GetSpriteIndex
            DMES ABCD 0;
            DME2 ABCD 0;
            AKOL A 0;
            FLOP A 0;
            TNT1 A 1 SetFrameInformation(0);
            TNT1 A 1 SetFrameInformation(1);
            TNT1 A 1 SetFrameInformation(2);
            TNT1 A 1 SetFrameInformation(3);
            Loop;
    }
}
